@model Chat
@using System.Security.Claims;
@using System.Linq;

<style>
    table {
        border-collapse: collapse;
        width: 200px;
        height: 200px;
        background-color: #ccc;
        text-align: center;
        color: white;
      }      
      td {
        position: relative;
        border: 10px solid transparent;
      }      
      td::after {
        content: '';
        position: absolute;
        top: -10px;
        left: -10px;
        width: 100%;
        height: 100%;        
        border: 10px solid blue;
        border-image-source: url(//mdn.mozillademos.org/files/6009/border-image-2.png);
        border-image-slice: 33%;
        border-image-repeat: round;
        border-image-outset: 0;
      }      
      td:hover::after {
        /* for demonstration only */
        border-image: none;
        background-color: rgba(0,0,255,0.33);
      }      
      td:not(:last-child)::after {
        border-right: 0;
      }      
      tr:not(:last-child) td::after {
        border-bottom: 0;
      }
</style>

<div class="chat-body">
    <h1>Welcome to Tic Tac Toe game!</h1>
    <h1>Please select free numeric cell and make your move by sending the number</h1>
    <table class="board">
        <tr>
            <td>1</td><td>2</td><td>3</td>
        </tr>
        <tr>
            <td>4</td><td>5</td><td>6</td>
        </tr>
        <tr>
            <td>7</td><td>8</td><td>9</td>
        </tr>
    </table>

    @{string[] Arr = new string[9];
    foreach(var message in Model.Messages){  

    <div class="message">
        <header>@message.Name:</header>        
        <p>@message.Text</p>
        <footer>@message.Timestamp</footer>
    </div>

    if (@message.Text == "1") Arr[0] = message.turnMark;
    if (@message.Text == "2") Arr[1] = message.turnMark;
    if (@message.Text == "3") Arr[2] = message.turnMark;
    if (@message.Text == "4") Arr[3] = message.turnMark;
    if (@message.Text == "5") Arr[4] = message.turnMark;
    if (@message.Text == "6") Arr[5] = message.turnMark;
    if (@message.Text == "7") Arr[6] = message.turnMark;
    if (@message.Text == "8") Arr[7] = message.turnMark;
    if (@message.Text == "9") Arr[8] = message.turnMark;
    }

    <h1>Current Board</h1>
    <table class="board">
    <tr>
        <td>@Arr[0]</td><td>@Arr[1]</td><td>@Arr[2]</td>
    </tr>
    <tr>
        <td>@Arr[3]</td><td>@Arr[4]</td><td>@Arr[5]</td>
    </tr>
    <tr>
        <td>@Arr[6]</td><td>@Arr[7]</td><td>@Arr[8]</td>
    </tr>
    </table>
    <div class="turnMap"></div>

    var UserRole = @Model.Users.FirstOrDefault(c => c.UserId == User.FindFirst(ClaimTypes.NameIdentifier).Value).Role;
    if (UserRole == UserRole.Creater) 
    {
        <form class="chat-input" onsubmit="sendMessage(event)" asp-controller="Home" asp-action="CreateMessage">
            <input type="hidden" name="roomId" value="@Model.Id">
            <input type="hidden" name="turnMark" value="X">
            <input type="text" name="message" id="message-input">
            <button type="submit">Send</button>             
        </form> 
   }
    else 
    {
        <form class="chat-input" onsubmit="sendMessage(event)" asp-controller="Home" asp-action="CreateMessage">
            <input type="hidden" name="roomId" value="@Model.Id">
            <input type="hidden" name="turnMark" value="O">
            <input type="text" name="message" id="message-input">
            <button type="submit">Send</button>             
        </form>
    }
}
</div>>

@section scripts {
    <script src="~/js/signalr.min.js"></script>
    <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
    <script>
        var connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .build(); 
            
        var _connectionId = '';
        var i = 666;
        var arr = @Html.Raw(Json.Serialize(Model.Messages));
        let players = ['X', 'O'];
        let activePlayer = 0;
        let counter = 0;
        let field = [  ['', '', ''],
                       ['', '', ''],
                       ['', '', '']  ];

        connection.on("RecieveMessage", function (data) {

            var message = document.createElement("div")
            message.classList.add('message')

            var header = document.createElement("header")
            header.appendChild(document.createTextNode(data.name + ':'))
            var tempName = JSON.stringify(data.name);

            var p = document.createElement("p")
            p.appendChild(document.createTextNode(data.text))
            var temp = JSON.stringify(data.text);
            var temptext = temp.substring(1, temp.length-1);
            var tempturnMark = JSON.stringify(data.turnMark);

            var footer = document.createElement("footer")
            footer.appendChild(document.createTextNode(data.timestamp))

            message.appendChild(header);
            message.appendChild(p);
            message.appendChild(footer);

            var data = ["", "", "", "", "", "", "", "", "" ]; // corrected Array syntax
            window.arr.push({id: window.i, name: window.i.toString(), text: temp.substring(1, temp.length-1), timestamp: null, turnMark: tempturnMark.substring(1, tempturnMark.length-1)});
            window.i++;

            window.arr.forEach(currentValue => { // перебираем все элементы массива array
                if (currentValue.text == "1") 
                {
                    data[0] = currentValue.turnMark;
                    field[0][0] = currentValue.turnMark;
                    counter++;
                }
                if (currentValue.text == "2") 
                {
                    data[1] = currentValue.turnMark;
                    field[0][1] = currentValue.turnMark;
                    counter++;
                }
                if (currentValue.text == "3") 
                {
                    data[2] = currentValue.turnMark;
                    field[0][2] = currentValue.turnMark;
                    counter++;
                }       
                if (currentValue.text == "4") 
                {
                    data[3] = currentValue.turnMark;
                    field[1][0] = currentValue.turnMark;
                    counter++;
                }
                if (currentValue.text == "5") 
                {
                    data[4] = currentValue.turnMark;
                    field[1][1] = currentValue.turnMark;
                    counter++;
                }
                if (currentValue.text == "6") 
                {
                    data[5] = currentValue.turnMark;
                    field[1][2] = currentValue.turnMark;
                    counter++;
                } 
                if (currentValue.text == "7") 
                {
                    data[6] = currentValue.turnMark;
                    field[2][0] = currentValue.turnMark;
                    counter++;
                }
                if (currentValue.text == "8") 
                {
                    data[7] = currentValue.turnMark;
                    field[2][1] = currentValue.turnMark;
                    counter++;
                }
                if (currentValue.text == "9") 
                {
                    data[8] = currentValue.turnMark;
                    field[2][2] = currentValue.turnMark;
                    counter++;
                } 
            });
            document.querySelector('.turnMap').append(message);

            var messtable = document.createElement("div")
            messtable.classList.add('message')
            var table = document.createElement("table");
            var i = 0;
            for (var r = 0; r < 3; r++) {
                var row = table.insertRow(-1);
                for (var c = 0; c < 3; c++) {
                    var cell = row.insertCell(-1);
                    cell.appendChild(document.createTextNode(data[i++]));
                }
            }
            messtable.appendChild(table);
            document.querySelector('.turnMap').append(messtable);
            
            var UserRole = @Html.Raw(Json.Serialize(Model.Users.FirstOrDefault(c => c.UserId == User.FindFirst(ClaimTypes.NameIdentifier).Value).Role));
            if (UserRole == 0)
                 { if (counter % 2 == 1) { activePlayer = 0; } else { activePlayer = 1; } }
            else { if (counter % 2 == 0) { activePlayer = 0; } else { activePlayer = 1; } }
            
            if (temptext == "1" || "2"|| "3"|| "4"|| "5"|| "6"|| "7"|| "8"|| "9") {
                    counter++;
            }
            let shot = players[activePlayer];
            let winncounter = 0;

            for (let i = 0; i <= 2; i++) {
                for (let j = 0; j <= 2; j++) {
                    if (field[i][0] == shot && field[i][1] == shot && field[i][2] == shot) {
                        winncounter = 1;
                        } else if (field[0][j] == shot && field[1][j] == shot && field[2][j] == shot) {
                            winncounter = 1;
                            } else if (field[0][0] == shot && field[1][1] == shot && field[2][2] == shot) {
                                winncounter = 1;
                                } else if (field[0][2] == shot && field[1][1] == shot && field[2][0] == shot) {
                                    winncounter = 1;
                                    }
                }
            }

            if (winncounter == 1) showWinner(tempName);
            if (window.arr.length == 9) showTie();
})    

            var joinRoom = function() {
                var url = '/Chat/JoinRoom/' + _connectionId + '/@Model.Id'
                axios.post(url, null)
                .then(res => {
                    console.log("Room Joined", res);
                })
                .catch(err => {
                    console.err("Faied to join Room!", err);
                })
            }        

            var LeaveRoom = function() {
                var url = '/Chat/LeaveRoom/' + _connectionId + '/@Model.Id'
                axios.post(url, null)
                .then(res => {
                    console.log("Room Joined", res);
                })
                .catch(err => {
                    console.err("Faied to join Room!", err);
                })
            }     
            
            connection.start()
               .then(function () {
                   connection.invoke('getConnectionId')
                        .then(function (connectionId) {
                            _connectionId = connectionId
                            joinRoom();
                        })
                })
            .catch(function (err) { 
                console.log(err)
            })  

    var sendMessage = function (event) {
        event.preventDefault();

        var data = new FormData(event.target);
        
        document.getElementById('message-input').value = '';
        axios.post('/Chat/SendMessage', data)
            .then(res => {
                console.log("Message Sent!")
            })
            .catch(err => {
                console.log("Failed to send message!")
            })
    }

    var showWinner = function(winner) {
        confirm('Winner is ' + winner)
        console.log(winner);

        LeaveRoom();

        var delayInMilliseconds = 1000; //1 second
        setTimeout(function() {
              //your code to be executed after 1 second
              window.location.replace("/666");
            }, delayInMilliseconds);
    }    

    var showTie = function() {
        confirm('Game is Tied')

        LeaveRoom();

        var delayInMilliseconds = 1000; //1 second
        setTimeout(function() {
              //your code to be executed after 1 second
              window.location.replace("/666");
            }, delayInMilliseconds);
    }    
    </script>
}z